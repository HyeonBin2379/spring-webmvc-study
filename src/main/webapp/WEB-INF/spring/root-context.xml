<?xml version="1.0" encoding="UTF-8"?>

<!-- 스프링이 운영하는 컨테이너에 관한 환경설정을 수행 -> webapplicationcontext에서 사용할 bean 객체를 추가 -->
<!-- servlet-context.xml 파일을 여기에 연동 -> 그리고 root-context.xml 파일을 web.xml 파일에 연동 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--  ApplicationContext에 SampleDAO, SampleService를 스프링 빈으로 등록  -->
    <!--    <bean class="com.ssg.springwebmvc.sample.SampleDAO"></bean>-->
    <!--    <bean class="com.ssg.springwebmvc.sample.SampleService"></bean>-->

    <!--    <bean class="com.ssg.springwebmvc.sample.Restaurant"></bean>-->
    <!--    <bean class="com.ssg.springwebmvc.sample.Chef"></bean>-->

    <!--  base-package로 지정한 패키지 내부에서 @Component가 붙은 클래스를 찾아 모두 스프링 빈으로 등록-->
    <context:component-scan base-package="com.ssg.springwebmvc"></context:component-scan>

    <!-- ConnectionUtil.java 클래스의 HikariCP 설정 지정 코드와 동일  -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/member_servlet_db?serverTimezone=Asia/Seoul"></property>
        <property name="username" value="root"></property>
        <property name="password" value="mysql1234"></property>
        
        <property name="dataSourceProperties">
            <props>
                <prop key="cachePrepStmts">true</prop>
                <prop key="prepStmtCacheSize">250</prop>
                <prop key="prepStmtCacheSqlLimit">2048</prop>
            </props>
        </property>
    </bean>

    <!--  HikariConfig 객체를 주입한 HikariDataSource 객체 생성  -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig"/>
    </bean>


    <!--  지정한 데이터소스를 사용하는 JDBCTemplate 및 tranctactionManager 객체 등록  -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--  @Transactional 어노테이션 활성화  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!--  매핑을 수행할 매퍼 인터페이스가 저장된 패키지 경로를 지정  -->
    <mybatis:scan base-package="com.ssg.springwebmvc.mapper"/>
    <!--  MyBatis를 사용하기 위한 SqlSessionFactory를 스프링 빈으로 등록  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  SqlSession을 설정할 데이터소스를 지정  -->
        <property name="dataSource" ref="dataSource"/>
        <!--  resources 폴더 내부의 mappers에 관한 하위 경로에 저장된 .xml 파일의 쿼리문을 매퍼 인터페이스와 연결  -->
        <property name="mapperLocations" value="classpath:/mappers/**/*.xml"/>
    </bean>
</beans>